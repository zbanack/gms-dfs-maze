<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE EVENT of object oCell

var w, cols, rows, i, j; // define vars. Values are passed in through object oMaze when created

/*
Each cell has four walls associated with it
    wall[0] = top wall, wall[1] = right side wall, wall[2] = bottom wall, wall[3] = left side wall
All four walls drawn together will produce an outline of a square
If wall[i] = false, the wall will not be drawn. By default, all four should be
*/
for (var i = 0; i &lt; 4; i++) {
    walls[i] = true;
}

// whether or not the cell has been visited yet and is a part of the maze
visited = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW EVENT of object oCell

draw_set_color(make_color_rgb(42, 42, 42)); // set color to dark gray/black

if (visited) { // if the cell has been visited by the generator
    draw_set_color(make_color_rgb(0, 0, 255)); // set color to blue
    if (id == oMaze.current) { // set color to green if the cell is currently active
        draw_set_color(make_color_rgb(0, 255, 0));
    }
}
// draw rectangle over span of cell, colored based off the scenerios reached above
draw_rectangle(x, y, x + w, y + w, false);

// set the color to white to draw the walls
draw_set_color(c_white);

if (walls[0]) { // draw top wall
    draw_line(x, y, x + w, y);
}

if (walls[1]) { // draw right wall
    draw_line(x + w, y, x + w, y + w);
}

if (walls[2]) { // draw bottom wall
    draw_line(x + w, y + w, x, y + w);
}

if (walls[3]) { // draw left wall
    draw_line(x, y + w, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
