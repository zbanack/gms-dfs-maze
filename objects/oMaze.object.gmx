<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE EVENT of object oMaze

/*
    @author Zack Banack
    https://github.com/zbanack
*/

random_set_seed(randomize()); // set a random seed to produce unique mazes every time

width = room_width; // px horizontal span of the maze (width of room) (320)
height = room_height; // px vertical span of the maze (height of room) (240)

w = 10; // px width of each cell (applied to height also to produce square cells)

// calculate the number of cells in rows and columns of the maze (total cells = columns * rows)
cols = floor(width / w); // columns
rows = floor(height / w); // rows

// cycle through all columns and rows to fill the board will cells
for (var i = 0; i &lt; cols; i++) {
    for (var j = 0; j &lt; rows; j++) {
        /*
        Create a cell at (i, j) and multiply the coordinates by
        the cell size to properly position them in the room.
        If your maze should not start at (0, 0), add an offset to the
        x and y spawning position (be sure width and height vars take into
        account this repositioning).
        e.g. obj = instance_create(100 + (i * w), 100 + (j * w), oCell);
        */
        obj = instance_create(i * w, j * w, oCell);

        // pass variables from the generator into the cell
        obj.i = i; // pass horizontal index
        obj.j = j; // pass vertical index
        obj.w = w; // pass width of cell
        obj.cols = cols; // pass number of columns
        obj.rows = rows; // pass number of rows rows
        grid[i, j] = obj; // set index of 2d array to the cell
    }
}
/*
We've just filled a 2d array, spanning the entire room, with cells
(room_width/w) * (room_height/w) = 32 * 24 = 768 cell objects
*/

// cell from which the maze begins generating. [0, 0] is top-left
current = grid[0, 0];

// create a stack to previously visited cells, used for DFS backtracking
stack = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STEP EVENT of object oMaze

/*
    @author Zack Banack
    https://github.com/zbanack
*/

// the statement within the brackets will be executed until the stack is empty (until)
do {
    current.visited = true; // the current, active cell has been visited

    // the destination cell, where we head next, has yet to be determined
    next = undefined;

    // check the current cell's neighbors to determine if we can visit one
    with(current) {
        other.next = checkNeighbors();
    }

    // if the cell can move adjacently; if we have an unvisited neighbor
    if (next != undefined) {
        next.visited = true; // mark our neighbor as visited in preparation of the move
        ds_list_add(stack, current); // add the current, active cell to the stack
        removeWalls(current, next); // remove the walls between us and our neighbor
        current = next; // update active cell to the neighboring cell
    } else if (!ds_list_empty(stack)) { // if we have no unvisited neighbors and the stack isn't empty
        // pop a cell off the top of the stack and visit it
        current = ds_list_find_value(stack, ds_list_size(stack) - 1);
        ds_list_delete(stack, ds_list_size(stack) - 1); // remove the cell from the stack
    }
}
until(ds_list_empty(stack)); // the stack is empty; all cells have been visited

// reset the room by pressing the "R" key
if (keyboard_check_pressed(ord("R"))) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
